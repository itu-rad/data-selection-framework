model_name: llama3_2_1B_instruct_warmup_steps_fixed
output_dir: ./less/gradstore/${model_name}/validation_grads/

checkpoints: [0,1,2,3] # A list of which epochs to be used (epochs start from 0)
gradient_projection_dimension: [8192]
gradient_type: SGD
info_type : grads
max_samples:


# Model Arguments
model:
  _component_: torchtune.models.llama3_2.lora_llama3_2_1b
  lora_attn_modules: ['q_proj', 'k_proj', 'v_proj', 'output_proj'] # LESS default = q_proj k_proj v_proj o_proj
  apply_lora_to_mlp: True # LESS default = True
  lora_rank: 128  # LESS default = 128
  lora_alpha: 512  # LESS default = 512
  lora_dropout: 0.1 # LESS default = 0.1

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: model_cache/downloaded_models/Llama-3.2-1B-Instruct/original/tokenizer.model
  max_seq_len: 2048 # LESS default = 2048

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: model_cache/less/warmup_models/${model_name} # Let this be the folder where the model's epochs are saved and set checkpoints to select which to use.      
                  
  checkpoint_files: [
     ft-model-00001-of-00001.safetensors
  ]
  adapter_checkpoint: adapter_model.pt
  recipe_checkpoint: recipe_state.pt
  output_dir: ${output_dir}
  model_type: LLAMA3_2
resume_from_checkpoint: True # Must be True for LESS implementation since torchtune links 
                             # this attribute to the optimizer state loading. 
save_adapter_weights_only: False



dataset:
  _component_: torchtune.datasets.instruct_dataset
  source: truthfulqa/truthful_qa
  data_dir: generation
  split: validation
  # specify the columns for _setup_data() in step 2.2_getvalidation_gradstore.py
  subtask_column1: category
  subtask_column2: type
  input_column: question
  output_column: best_answer
seed: null
shuffle: True
n_print_examples: 3

  
batch_size: 1 # LESS default = 1

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.0 # LESS default = 0.0
  lr: 2e-05 # LESS default = 2e-05
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup # LESS default use "type linear"
  num_warmup_steps: 100 # LESS default use a ratio of 0.03

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# Training
epochs: 4 # LESS default = 4
max_steps_per_epoch: null # LESS default = unknown
gradient_accumulation_steps: 32  # Use to increase effective batch size # LESS default = 32
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16 # LESS default = "bf16 True"

# Activations Memory
enable_activation_checkpointing: False  # True reduces memory
enable_activation_offloading: False  # True reduces memory


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
